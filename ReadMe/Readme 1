project we will build: a generic Landing Page for an app.project we will build: a generic Landing Page for an app.
the landing page has a number of sections:
- a header with texts and a button
- a features section
- a quote section
- a footer with a menu

( A landing page is where users land when clicking on promotional/marketing links.
For example, when you want to promote your app, you share its landing page URL on social and other media.)

# HTML Structure


Let's start by building the basic HTML structure of our landing page. We will start by building the desktop version and then will adapt it for mobile and make it responsive.
We will use HTML5 semantic tags to define the sections:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My landing Page</title>
</head>
<body>
<!--head section-->
    <header>
        header
    </header>
    
<!--Features section-->
    <section class="features">
        features
    </section>

<!--Quote section-->
    <section class="quote">
        quote
    </section>

<!--footer section-->
    <footer>
        footer
    </footer>
</body>
</html>

Now, we need to add some basic CSS styles to give our sections some color and size.

header{
    color: #fff;
    background-color: #284b63;
    padding: 80px 0;  /*  top/bottom left/right   */
    text-align: center;
}

section{
    padding: 40px 0;
    text-align: center;
}

.features{
    background: #fff;
    color: #000;
}

.quote{
    background: #549da0;
    color: #fff;
}

footer{
    background: #353535;
    color: #868686;
    padding: 30px 0;
    text-align: center;
}

We have used padding to give the sections some height.
(Since we provided only two values for the padding, it will set both the top and bottom padding to the provided value. (padding: 40px 0; is the same as padding: 40px 0 40px 0;))
We have also defined background and text colors for the sections.

We have not given any width to the sections, so they will occupy the entire width available.
This means that when the screen is resized, the section's width will always remain 100% of the available width.
Since we are planning to create a responsive page, we do not establish any fixed width values for our sections; rather we make it occupy the entire width of the screen.

#Building The Header

We use h1 and h2 tags for the texts and an a tag for the button. Also, we wrap the whole header on a container div, so we can style it with CSS:
<header>
        <div class="container">
            <h1>Awesome App</h1>
            <h2>This app will change your life!</h2>
            <a href="" class="btn">Download Now</a>
        </div>
    </header>

  Now It's time to add some CSS styles to our header elements.
Let's start with the h1 and h2 tags:
  h1{
    font-size: 48px;
    margin: 0 0 16px 0;
}
h2{
    font-size: 24px;
    margin: 0 0 16px 0;
    font-weight: 300;
}

Recall how the margin values work: the first value is the top margin, the second value is the right margin, third is the bottom margin and the last one defines the left margin. This means the values go in the clockwise direction, starting from the top.

For our container div, we will define the following styles:
  .container{
    margin: 0 auto;
    padding: 0 20px 0 20px;
    max-width: 900px;
}
Since our header takes the full width of the browser, we limited the maximum width the text container can have to 900px using the max-width property.
This makes the div stop expanding so that the text does not get too wide.
Because we will reuse our container class for other sections, we defined some left and right paddings, which ensures that the child elements stay 20px away from the edges of the screen.
(margin: 0 auto; ensures that the content stays at the center of the container, irrespective of its size.
On a screen that is larger than 900px in width, the container div will have the width of 900px, so we align it to the center of the screen.)


Our header is almost ready!
However, currently our Download Now button is just a link without any style.
To make it look like a button, we need to add the following styles:
.btn{
    display: inline-block;
    color: #fff;
    font-weight: 500;
    font-size: 20px;
    background: #549da0;
    border: none;
    border-radius: 5px;
    padding: 12px 16px;
    cursor: pointer;
}

The display property specifies the display behavior of the element. We have set it to inline-block, so that the link behaves as an inline block container.

Our button also needs a hover effect, so it changes its background color when the mouse hovers over it.

To define the style, we will use the :hover selector:
  .btn:hover{
    background: #468486;
}
Now, when the cursor hovers over the button, the button's background color changes.

## Building The Features Section
Let's start building our features section:

This section contains three features along with an image and text. The features are aligned horizontally next to each other.

We will reuse our container div to wrap all the elements of the features section:

<section class="features">
        <div class="container">
            <div class="feature">
                <img src="" alt="address pin img">
                <p>An Awesome feature</p>
            </div>
            <div class="feature">
                <img src="" alt="chart pin img">
                <p>An Awesome feature</p>
            </div>
            <div class="feature">
                <img src="" alt="msg img">
                <p>An Awesome feature</p>
            </div>
        </div>
    </section>

  Each feature is wrapped in a div with class "feature", which we will use to position the features.
It contains an image and a paragraph of text.
Right now, they are simply positioned below each other, so we need to add some CSS styles to fix that.

In order to position the feature divs next to each other horizontally, we will use display: inline-block to make them inline-level block containers and provide a width:
  .feature{
    width: 32%;
    display: inline-block;
    font-size: 16px;
}
.feature img{
    width: 40%;
}

Because we have 3 features, we gave each feature div 32% of the width of their container.
The remaining space will be left for the space between the elements.
We also set the width of the images to be 40% of their containers.
By using only % values for the widths, the features will always remain next to each other and be positioned horizontally, irrespective of the browser width.


## The Quote Section
Our Quote section contains a testimonial from a satisfied customer:

  <section class="quote">
        <blockquote class="container">
            <p>"Some great quote!"</p>
            <cite>Satisfied Customer</cite>
        </blockquote>
    </section>

We used the blockquote tag as the container and reused our container class on it.
Inside the blockquote, we have a paragraph of text representing the quote, and a cite tag, containing the name of the customer.
The blockquote element specifies a section that is quoted, while cite is used to define a title.

Time to define the styles!

blockquote{
    margin: 0;
    padding: 0;
    text-align: center;
}
blockquote p{
    margin: 0 0 5px 0;
    font-size: 24px;
}
blockquote cite{
    font-size: 16px;
    font-style: italic;
}
blockquote cite:before{
    content: '-';
    margin-right: 5px;
}
First, we need to reset the padding/margin of the blockquote element since the browsers have some default values for them.
We also define the font sizes and margins for the elements.

Last but not least, we use the :before selector to set a dash before the cite element.


## Building The Footer
The last section of our landing page is the footer:
  It contains a menu and copyright text.

It is common practice to use a list for the menu items:

  <footer>
        <div class="container">
            <ul>
                <li><a href="#">Home</a></li>
                <li><a href="#">About</a></li>
                <li><a href="#">Contacts</a></li>
            </ul>
            <p>&copy;  All rights reserved.</p>
        </div>
    </footer>

We have reused our container div to provide the necessary paddings and center alignment.
Each of the menu links are contained in list items.
The copyright text is a simple paragraph.
By default, the list items are styled as a vertical bullet list. We will change that style with CSS in the next part of this lesson.


Here is the CSS:
  footer ul{
    margin: 0;
    padding: 0;
    list-style: none;
}
footer li{
    display: inline-block;
}
footer li a{
    padding: 6px;
    font-size: 14px;
    text-decoration: none;
    color: #c3c3c3;
}
footer li a:hover{
    color: #fff;
}

To make the menu list horizontal and remove the bullets, we used list-style: none; for the ul element.
We also set display: inline-block; for the list items to make them inline-level element containers and so they are positioned next to each other horizontally.

The rest of the styles are simple text and background colors, as well as text sizes.
We have completed building the desktop version of our landing page!
However, while it always occupies the entire width of the browser, it is not really responsive, as the layout remains the same for smaller screens and is not very mobile-friendly.

#########   Making Responsive   #########

## Viewport

Before we start making our landing page responsive, we need to cover a few concepts.
The first concept is the viewport: the visible area of a web page.
Usually, a web page with a fixed width becomes too large to fit the viewport on a small screen, such as a mobile device or tablet. To fix this, browsers on those devices scaled down the entire web page to fit the screen.

You can control your viewport in HTML5 using a meta tag:
<meta name="viewport" content="width=device-width, initial-scale=1.0">  

width=device-width sets the width of the page to follow the screen-width of the device.
initial-scale=1.0 sets the initial zoom level when the page is first loaded by the browser.

## Media Queries

Media queries provide the ability to specify different CSS styles for different widths of the viewport, or other specifications.
This makes it possible for a web page to define different layout styles for different screen sizes and make the page responsive!

You define a media query using the @media rule inside of your existing style sheet:
@media screen and (max-width: 600px) {
   body {
     background-color: blue;
  }
}
 
The @media rule is followed by the media type we are targeting (the screen in our case) and sets the condition when the rules apply (max-width:600px in our case).
So now, the style will apply if the page has a width up to 600px.

You can also define multiple conditions, for example a max and min width of the viewport:
@media screen and (min-width: 800px) and (max-width: 1024px) {
   body {
     background-color: blue;
  }
}  

Now the style will apply for screen sizes from 800 to 1024px.

You can also define multiple media queries for a single web page.
Media queries allow you to define breakpoints when the page layout and style should change, as well as define the corresponding CSS styles for these breakpoints.




###   Responsive Header   ###


On a mobile screen we want to change the text-size of our header texts and make the Download Now button span the entire width of the container.

To accomplish this, we define the corresponding styles in our media query:

@media screen and (max-width:480px) {
    .btn{
        display: block;
        font-size: 18px;
    }
    h1{
        font-size: 32px;
        margin: 0 0 8px 0;
    }
    h2{
        font-size: 18px;
    }
    section{
        padding: 25px 0 15px 0;
    }
}
As you can see, we changed some font-size properties, changed the paddings of the section container, and changed the button's display property to block, making it a block level element which takes the whole width of its container.


## Responsive Features

Time to make the features section responsive!
It currently includes 3 features aligned next to each other.

On a small screen we want to place them horizontally, with each feature taking the entire width of the container.
Here is the style that we will use in our media query:

.feature{
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: left;
        margin: 0 0 10px 0;
        font-size: 16px;
    }
    .feature img{
        width: 15%;
        min-width: 60px;
        margin-right: 20px;
    }
We changed the width of each feature div to 100% and set the display property to flex which makes the div a flexbox container. This allows us to position the child features horizontally and also set the alignment of its child elements -- the icon and the text -- using the align-items and justify-content properties.
We also set the width of the icons and defined some margins.

## Responsive Quote


For our quote section, we will just change the text size and some paddings:
.quote{
        padding: 30px 0;
    }
    blockquote p{
        font-size: 18px;
    }
    blockquote cite{
        font-size: 14px;
    }

    We don't need to change the position of the section elements, as they are already aligned to the center of the screen.

    ## Responsive Footer


Last, but not least, we need to change our footer section.

We need to position the menu links below each other:

footer{
        padding: 30px 0 10px 0;
    }
    footer li{
        display: block;
        margin: 5px 0;
    }

  The display:block; style makes the list items block level elements so they take the entire width of their container. This makes the items align under each other:


Now our landing page is fully responsive, having different layouts for mobile and desktop screens.






